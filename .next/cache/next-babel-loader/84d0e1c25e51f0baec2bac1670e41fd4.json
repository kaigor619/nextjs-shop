{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as Types from '../types';\nexport var initialState = {\n  count_cart: 0,\n  total_price: 0,\n  cart: [],\n  modal: false\n};\n/**\r\n * Find cart item by id\r\n *\r\n * @param {Number} index\r\n * @param {Object} State\r\n */\n\nvar findCartItem = function findCartItem(id, state) {\n  var ind = state.cart.findIndex(function (item) {\n    return id === item.id;\n  });\n  var cartItem = state.cart[ind];\n  return [ind, cartItem];\n};\n\nvar updateCount = function updateCount(id, state, newCount) {\n  var _findCartItem = findCartItem(id, state),\n      _findCartItem2 = _slicedToArray(_findCartItem, 2),\n      ind = _findCartItem2[0],\n      cartItem = _findCartItem2[1];\n\n  var updatedItem = _objectSpread(_objectSpread({}, cartItem), {}, {\n    count: newCount\n  });\n\n  var cart = [].concat(_toConsumableArray(state.cart.slice(0, ind)), [updatedItem], _toConsumableArray(state.cart.slice(ind + 1)));\n  return _objectSpread(_objectSpread({}, state), {}, {\n    cart: cart\n  });\n};\n\nvar deleteCartItem = function deleteCartItem(id, state) {\n  var _findCartItem3 = findCartItem(id, state),\n      _findCartItem4 = _slicedToArray(_findCartItem3, 2),\n      ind = _findCartItem4[0],\n      cartItem = _findCartItem4[1];\n\n  var cart = [].concat(_toConsumableArray(state.cart.slice(0, ind)), _toConsumableArray(state.cart.slice(ind + 1)));\n  return _objectSpread(_objectSpread({}, state), {}, {\n    modal: true,\n    cart: cart\n  });\n};\n\nvar addProduct = function addProduct(product, state) {\n  var count = product.count,\n      id = product.id;\n\n  var _findCartItem5 = findCartItem(id, state),\n      _findCartItem6 = _slicedToArray(_findCartItem5, 2),\n      ind = _findCartItem6[0],\n      cartItem = _findCartItem6[1];\n\n  var newItem, cart;\n\n  if (ind > -1) {\n    newItem = _objectSpread(_objectSpread({}, cartItem), {}, {\n      count: count + cartItem.count\n    });\n    cart = [].concat(_toConsumableArray(state.cart.slice(0, ind)), [newItem], _toConsumableArray(state.cart.slice(ind + 1)));\n  } else {\n    newItem = _objectSpread({}, product);\n    cart = [].concat(_toConsumableArray(state.cart), [newItem]);\n  }\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    modal: true,\n    cart: cart\n  });\n};\n\nexport var reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case Types.ADD_PRODUCT:\n      {\n        var product = action.product;\n        return addProduct(product, state);\n      }\n\n    case Types.CHANGE_MODAL:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          modal: action.payload\n        });\n      }\n\n    case Types.UPDATE_COUNT:\n      {\n        var id = action.id,\n            count = action.count;\n        return updateCount(id, state, count);\n      }\n\n    case Types.DELETE_CART_ITEM:\n      {\n        return deleteCartItem(action.id, state);\n      }\n\n    default:\n      return state;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}