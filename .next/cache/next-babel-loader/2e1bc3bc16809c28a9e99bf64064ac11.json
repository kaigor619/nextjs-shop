{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as Types from '../types';\nexport const initialState = {\n  count_cart: 0,\n  total_price: 0,\n  cart: [],\n  modal: false\n};\n/**\r\n * Find cart item by id\r\n *\r\n * @param {Number} index\r\n * @param {Object} State\r\n */\n\nconst findCartItem = (id, state) => {\n  let ind = state.cart.findIndex(item => id === item.id);\n  let cartItem = state.cart[ind];\n  return [ind, cartItem];\n};\n\nconst updateCount = (id, state, newCount) => {\n  let [ind, cartItem] = findCartItem(id, state);\n\n  let updatedItem = _objectSpread(_objectSpread({}, cartItem), {}, {\n    count: newCount\n  });\n\n  let cart = [...state.cart.slice(0, ind), updatedItem, ...state.cart.slice(ind + 1)];\n  return _objectSpread(_objectSpread({}, state), {}, {\n    cart\n  });\n};\n\nconst deleteCartItem = (id, state) => {\n  let [ind, cartItem] = findCartItem(id, state);\n  let cart = [...state.cart.slice(0, ind), ...state.cart.slice(ind + 1)];\n  return _objectSpread(_objectSpread({}, state), {}, {\n    modal: true,\n    cart\n  });\n};\n\nconst addProduct = (product, state) => {\n  let {\n    count,\n    id\n  } = product;\n  let [ind, cartItem] = findCartItem(id, state);\n  let newItem, cart;\n\n  if (ind > -1) {\n    newItem = _objectSpread(_objectSpread({}, cartItem), {}, {\n      count: count + cartItem.count\n    });\n    cart = [...state.cart.slice(0, ind), newItem, ...state.cart.slice(ind + 1)];\n  } else {\n    newItem = _objectSpread({}, product);\n    cart = [...state.cart, newItem];\n  }\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    modal: true,\n    cart\n  });\n};\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case Types.ADD_PRODUCT:\n      {\n        let {\n          product\n        } = action;\n        return addProduct(product, state);\n      }\n\n    case Types.CHANGE_MODAL:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          modal: action.payload\n        });\n      }\n\n    case Types.UPDATE_COUNT:\n      {\n        let {\n          id,\n          count\n        } = action;\n        return updateCount(id, state, count);\n      }\n\n    case Types.DELETE_CART_ITEM:\n      {\n        return deleteCartItem(action.id, state);\n      }\n\n    default:\n      return state;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}