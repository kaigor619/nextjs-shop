{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Component } from 'react';\nimport Card from '../../components/Card';\nimport Spinner from '../../components/Spinner';\nimport Error from '../../components/Error';\nimport styles from './Shop.module.css';\nimport PhoneService from '../../service/phone-service';\n\nconst Shop = ({\n  phones\n}) => {\n  let list = phones.map(item => {\n    return __jsx(Card, _extends({}, item, {\n      key: item.id\n    }));\n  });\n  return __jsx(\"div\", {\n    className: styles.shop_content\n  }, __jsx(\"div\", {\n    className: \"container\"\n  }, __jsx(\"h1\", {\n    className: \"text-center mt-5 mb-5\"\n  }, \"Phones\"), __jsx(\"div\", {\n    className: \"row no-gutters\"\n  }, list)));\n};\n\nclass ShopContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      loading: !this.props.phones,\n      phones: this.props.phones,\n      error: this.props.error\n    });\n\n    _defineProperty(this, \"render\", () => {\n      let {\n        phones,\n        loading,\n        error\n      } = this.state;\n\n      if (error) {\n        return __jsx(Error, null);\n      }\n\n      if (loading || !phones) {\n        return __jsx(Spinner, null);\n      }\n\n      return __jsx(Shop, {\n        phones: phones\n      });\n    });\n  }\n\n  static async getInitialProps({\n    req\n  }) {\n    let phones = null;\n\n    if (!req) {\n      return {\n        phones\n      };\n    }\n\n    try {\n      phones = await PhoneService().getPhones();\n    } catch (error) {\n      return {\n        error\n      };\n    }\n\n    return {\n      phones\n    };\n  }\n\n  async load() {\n    let phones = [];\n\n    try {\n      phones = await PhoneService().getPhones();\n    } catch (error) {\n      return this.setState({\n        error,\n        loading: false\n      });\n    }\n\n    this.setState({\n      loading: false,\n      phones\n    });\n  }\n\n  componentDidMount() {\n    if (!this.state.phones) {\n      this.load();\n    }\n  }\n\n}\n\nexport default ShopContainer;","map":null,"metadata":{},"sourceType":"module"}