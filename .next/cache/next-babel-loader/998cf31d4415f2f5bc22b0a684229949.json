{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as Types from '../types';\nexport const initialState = {\n  count_cart: 0,\n  total_price: 0,\n  cart: [],\n  modal: true\n};\n/**\r\n * Find cart item by id\r\n *\r\n * @param {Number} index\r\n * @param {Object} State\r\n */\n\nconst findCartItem = (id, state) => {\n  let ind = state.cart.findIndex(item => id === item.id);\n  let cartItem = state.cart[ind];\n  return [ind, cartItem];\n};\n\nconst updateCount = (id, state, operation) => {\n  let [ind, cartItem] = findCartItem(id, state);\n  let {\n    count,\n    price\n  } = cartItem;\n\n  let updatedItem = _objectSpread(_objectSpread({}, cartItem), {}, {\n    count: operation === 'plus' ? ++count : --count\n  });\n\n  let total_price = operation === 'plus' ? state.total_price + price : state.total_price - price;\n  let cart = [...state.cart.slice(0, ind), updatedItem, ...state.cart.slice(ind + 1)];\n  return _objectSpread(_objectSpread({}, state), {}, {\n    total_price,\n    cart\n  });\n};\n\nconst deleteCartItem = (id, state) => {\n  let [ind, cartItem] = findCartItem(id, state);\n  let total_price = state.total_price - cartItem.count * cartItem.price;\n  let count_cart = state.count_cart - cartItem.count;\n  let cart = [...state.cart.slice(0, ind), ...state.cart.slice(ind + 1)];\n  return _objectSpread(_objectSpread({}, state), {}, {\n    total_price,\n    count_cart,\n    cart\n  });\n};\n\nconst addProduct = (product, state) => {\n  let {\n    price,\n    count,\n    id,\n    name\n  } = product;\n  let count_cart = state.count_cart + count;\n  let total_price = state.total_price + price * count;\n  let [ind, cartItem] = findCartItem(id, state);\n  let newItem, cart;\n\n  if (ind > -1) {\n    newItem = _objectSpread(_objectSpread({}, cartItem), {}, {\n      count: count + cartItem.count\n    });\n    cart = [...state.cart.slice(0, ind), newItem, ...state.cart.slice(ind + 1)];\n  } else {\n    newItem = _objectSpread({}, product);\n    cart = [...state.cart, newItem];\n  }\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    count_cart,\n    total_price,\n    cart\n  });\n};\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case Types.ADD_PRODUCT:\n      {\n        let {\n          product\n        } = action;\n        return addProduct(product, state);\n      }\n\n    case Types.CHANGE_MODAL:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          modal: action.payload\n        });\n      }\n\n    case Types.MINUS_CART:\n      {\n        let {\n          id\n        } = action;\n        return updateCount(id, state, 'minus');\n      }\n\n    case Types.PLUS_CART:\n      {\n        let {\n          id\n        } = action;\n        return updateCount(id, state, 'plus');\n      }\n\n    case 'delete_cart':\n      {\n        return deleteCartItem(action.id, state);\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["D:/Programming languages/Next.js/re-store/src/redux/reducers/index.js"],"names":["Types","initialState","count_cart","total_price","cart","modal","findCartItem","id","state","ind","findIndex","item","cartItem","updateCount","operation","count","price","updatedItem","slice","deleteCartItem","addProduct","product","name","newItem","reducer","action","type","ADD_PRODUCT","CHANGE_MODAL","payload","MINUS_CART","PLUS_CART"],"mappings":"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","sourcesContent":["import * as Types from '../types'\r\n\r\nexport const initialState = {\r\n  count_cart: 0,\r\n  total_price: 0,\r\n  cart: [],\r\n  modal: true,\r\n}\r\n\r\n/**\r\n * Find cart item by id\r\n *\r\n * @param {Number} index\r\n * @param {Object} State\r\n */\r\nconst findCartItem = (id, state) => {\r\n  let ind = state.cart.findIndex((item) => id === item.id)\r\n  let cartItem = state.cart[ind]\r\n  return [ind, cartItem]\r\n}\r\n\r\nconst updateCount = (id, state, operation) => {\r\n  let [ind, cartItem] = findCartItem(id, state)\r\n\r\n  let { count, price } = cartItem\r\n\r\n  let updatedItem = {\r\n    ...cartItem,\r\n    count: operation === 'plus' ? ++count : --count,\r\n  }\r\n\r\n  let total_price =\r\n    operation === 'plus' ? state.total_price + price : state.total_price - price\r\n\r\n  let cart = [\r\n    ...state.cart.slice(0, ind),\r\n    updatedItem,\r\n    ...state.cart.slice(ind + 1),\r\n  ]\r\n\r\n  return {\r\n    ...state,\r\n    total_price,\r\n    cart,\r\n  }\r\n}\r\n\r\nconst deleteCartItem = (id, state) => {\r\n  let [ind, cartItem] = findCartItem(id, state)\r\n\r\n  let total_price = state.total_price - cartItem.count * cartItem.price\r\n  let count_cart = state.count_cart - cartItem.count\r\n  let cart = [...state.cart.slice(0, ind), ...state.cart.slice(ind + 1)]\r\n\r\n  return {\r\n    ...state,\r\n    total_price,\r\n    count_cart,\r\n    cart,\r\n  }\r\n}\r\n\r\nconst addProduct = (product, state) => {\r\n  let { price, count, id, name } = product\r\n\r\n  let count_cart = state.count_cart + count\r\n  let total_price = state.total_price + price * count\r\n\r\n  let [ind, cartItem] = findCartItem(id, state)\r\n\r\n  let newItem, cart\r\n\r\n  if (ind > -1) {\r\n    newItem = {\r\n      ...cartItem,\r\n      count: count + cartItem.count,\r\n    }\r\n    cart = [...state.cart.slice(0, ind), newItem, ...state.cart.slice(ind + 1)]\r\n  } else {\r\n    newItem = {\r\n      ...product,\r\n    }\r\n    cart = [...state.cart, newItem]\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    count_cart,\r\n    total_price,\r\n    cart,\r\n  }\r\n}\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case Types.ADD_PRODUCT: {\r\n      let { product } = action\r\n      return addProduct(product, state)\r\n    }\r\n    case Types.CHANGE_MODAL: {\r\n      return { ...state, modal: action.payload }\r\n    }\r\n\r\n    case Types.MINUS_CART: {\r\n      let { id } = action\r\n      return updateCount(id, state, 'minus')\r\n    }\r\n\r\n    case Types.PLUS_CART: {\r\n      let { id } = action\r\n      return updateCount(id, state, 'plus')\r\n    }\r\n\r\n    case 'delete_cart': {\r\n      return deleteCartItem(action.id, state)\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}