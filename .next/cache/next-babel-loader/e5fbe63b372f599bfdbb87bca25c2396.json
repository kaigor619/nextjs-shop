{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as Types from '../types';\nexport const initialState = {\n  count_cart: 0,\n  total_price: 0,\n  cart: [{\n    name: 'Realme C11',\n    price: 2999,\n    previewUrl: '/image/1/preview.webp',\n    gallery: ['/image/1/1.webp', '/image/1/2.webp', '/image/1/3.webp'],\n    id: 1,\n    attr: ['Black', 'Blue', 'Gold'],\n    description: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Quidem eos modi adipisci cupiditate culpa distinctio porro ad sit at dolorem.'\n  }, {\n    name: 'Apple iPhone 11',\n    price: 24499,\n    previewUrl: '/image/2/preview.webp',\n    gallery: ['/image/2/1.webp', '/image/2/2.webp', '/image/2/3.webp'],\n    id: 2,\n    attr: ['Black', 'Blue', 'Gold'],\n    description: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Quidem eos modi adipisci cupiditate culpa distinctio porro ad sit at dolorem.'\n  }],\n  modal: true\n};\n/**\r\n * Find cart item by id\r\n *\r\n * @param {Number} index\r\n * @param {Object} State\r\n */\n\nconst findCartItem = (id, state) => {\n  let ind = state.cart.findIndex(item => id === item.id);\n  let cartItem = state.cart[ind];\n  return [ind, cartItem];\n};\n\nconst updateCount = (id, state, operation) => {\n  let [ind, cartItem] = findCartItem(id, state);\n  let {\n    count,\n    price\n  } = cartItem;\n\n  let updatedItem = _objectSpread(_objectSpread({}, cartItem), {}, {\n    count: operation === 'plus' ? ++count : --count\n  });\n\n  let total_price = operation === 'plus' ? state.total_price + price : state.total_price - price;\n  let cart = [...state.cart.slice(0, ind), updatedItem, ...state.cart.slice(ind + 1)];\n  return _objectSpread(_objectSpread({}, state), {}, {\n    total_price,\n    cart\n  });\n};\n\nconst deleteCartItem = (id, state) => {\n  let [ind, cartItem] = findCartItem(id, state);\n  let total_price = state.total_price - cartItem.count * cartItem.price;\n  let count_cart = state.count_cart - cartItem.count;\n  let cart = [...state.cart.slice(0, ind), ...state.cart.slice(ind + 1)];\n  return _objectSpread(_objectSpread({}, state), {}, {\n    total_price,\n    count_cart,\n    cart\n  });\n};\n\nconst addProduct = (product, state) => {\n  let {\n    price,\n    count,\n    id,\n    name\n  } = product;\n  let count_cart = state.count_cart + count;\n  let total_price = state.total_price + price * count;\n  let [ind, cartItem] = findCartItem(id, state);\n  let newItem, cart;\n\n  if (ind > -1) {\n    newItem = _objectSpread(_objectSpread({}, cartItem), {}, {\n      count: count + cartItem.count\n    });\n    cart = [...state.cart.slice(0, ind), newItem, ...state.cart.slice(ind + 1)];\n  } else {\n    newItem = _objectSpread({}, product);\n    cart = [...state.cart, newItem];\n  }\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    count_cart,\n    total_price,\n    cart\n  });\n};\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case Types.ADD_PRODUCT:\n      {\n        let {\n          product\n        } = action;\n        return addProduct(product, state);\n      }\n\n    case Types.CHANGE_MODAL:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          modal: action.payload\n        });\n      }\n\n    case Types.MINUS_CART:\n      {\n        let {\n          id\n        } = action;\n        return updateCount(id, state, 'minus');\n      }\n\n    case Types.PLUS_CART:\n      {\n        let {\n          id\n        } = action;\n        return updateCount(id, state, 'plus');\n      }\n\n    case Types.DELETE_CART:\n      {\n        return deleteCartItem(action.id, state);\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["D:/Programming languages/Next.js/re-store/src/redux/reducers/index.js"],"names":["Types","initialState","count_cart","total_price","cart","name","price","previewUrl","gallery","id","attr","description","modal","findCartItem","state","ind","findIndex","item","cartItem","updateCount","operation","count","updatedItem","slice","deleteCartItem","addProduct","product","newItem","reducer","action","type","ADD_PRODUCT","CHANGE_MODAL","payload","MINUS_CART","PLUS_CART","DELETE_CART"],"mappings":"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","sourcesContent":["import * as Types from '../types'\r\n\r\nexport const initialState = {\r\n  count_cart: 0,\r\n  total_price: 0,\r\n  cart: [\r\n    {\r\n      name: 'Realme C11',\r\n      price: 2999,\r\n      previewUrl: '/image/1/preview.webp',\r\n      gallery: ['/image/1/1.webp', '/image/1/2.webp', '/image/1/3.webp'],\r\n      id: 1,\r\n      attr: ['Black', 'Blue', 'Gold'],\r\n      description:\r\n        'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Quidem eos modi adipisci cupiditate culpa distinctio porro ad sit at dolorem.',\r\n    },\r\n    {\r\n      name: 'Apple iPhone 11',\r\n      price: 24499,\r\n      previewUrl: '/image/2/preview.webp',\r\n      gallery: ['/image/2/1.webp', '/image/2/2.webp', '/image/2/3.webp'],\r\n      id: 2,\r\n      attr: ['Black', 'Blue', 'Gold'],\r\n      description:\r\n        'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Quidem eos modi adipisci cupiditate culpa distinctio porro ad sit at dolorem.',\r\n    },\r\n  ],\r\n  modal: true,\r\n}\r\n\r\n/**\r\n * Find cart item by id\r\n *\r\n * @param {Number} index\r\n * @param {Object} State\r\n */\r\nconst findCartItem = (id, state) => {\r\n  let ind = state.cart.findIndex((item) => id === item.id)\r\n  let cartItem = state.cart[ind]\r\n  return [ind, cartItem]\r\n}\r\n\r\nconst updateCount = (id, state, operation) => {\r\n  let [ind, cartItem] = findCartItem(id, state)\r\n\r\n  let { count, price } = cartItem\r\n\r\n  let updatedItem = {\r\n    ...cartItem,\r\n    count: operation === 'plus' ? ++count : --count,\r\n  }\r\n\r\n  let total_price =\r\n    operation === 'plus' ? state.total_price + price : state.total_price - price\r\n\r\n  let cart = [\r\n    ...state.cart.slice(0, ind),\r\n    updatedItem,\r\n    ...state.cart.slice(ind + 1),\r\n  ]\r\n\r\n  return {\r\n    ...state,\r\n    total_price,\r\n    cart,\r\n  }\r\n}\r\n\r\nconst deleteCartItem = (id, state) => {\r\n  let [ind, cartItem] = findCartItem(id, state)\r\n\r\n  let total_price = state.total_price - cartItem.count * cartItem.price\r\n  let count_cart = state.count_cart - cartItem.count\r\n  let cart = [...state.cart.slice(0, ind), ...state.cart.slice(ind + 1)]\r\n\r\n  return {\r\n    ...state,\r\n    total_price,\r\n    count_cart,\r\n    cart,\r\n  }\r\n}\r\n\r\nconst addProduct = (product, state) => {\r\n  let { price, count, id, name } = product\r\n\r\n  let count_cart = state.count_cart + count\r\n  let total_price = state.total_price + price * count\r\n\r\n  let [ind, cartItem] = findCartItem(id, state)\r\n\r\n  let newItem, cart\r\n\r\n  if (ind > -1) {\r\n    newItem = {\r\n      ...cartItem,\r\n      count: count + cartItem.count,\r\n    }\r\n    cart = [...state.cart.slice(0, ind), newItem, ...state.cart.slice(ind + 1)]\r\n  } else {\r\n    newItem = {\r\n      ...product,\r\n    }\r\n    cart = [...state.cart, newItem]\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    count_cart,\r\n    total_price,\r\n    cart,\r\n  }\r\n}\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case Types.ADD_PRODUCT: {\r\n      let { product } = action\r\n      return addProduct(product, state)\r\n    }\r\n    case Types.CHANGE_MODAL: {\r\n      return { ...state, modal: action.payload }\r\n    }\r\n\r\n    case Types.MINUS_CART: {\r\n      let { id } = action\r\n      return updateCount(id, state, 'minus')\r\n    }\r\n\r\n    case Types.PLUS_CART: {\r\n      let { id } = action\r\n      return updateCount(id, state, 'plus')\r\n    }\r\n\r\n    case Types.DELETE_CART: {\r\n      return deleteCartItem(action.id, state)\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}