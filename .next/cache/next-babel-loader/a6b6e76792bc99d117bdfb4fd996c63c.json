{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst initialState = {\n  count_cart: 0,\n  total_price: 0,\n  cart: []\n};\n/**\r\n * Find cart item by id\r\n *\r\n * @param {Number} index\r\n * @param {Object} State\r\n */\n\nconst findCartItem = (id, state) => {\n  let ind = state.cart.findIndex(item => id === item.id);\n  let cartItem = state.cart[ind];\n  return [ind, cartItem];\n};\n\nconst updateCount = (id, state, operation) => {\n  let [ind, cartItem] = findCartItem(id, state);\n  let {\n    count,\n    price\n  } = cartItem;\n\n  let updatedItem = _objectSpread(_objectSpread({}, cartItem), {}, {\n    count: operation === 'plus' ? ++count : --count\n  });\n\n  let total_price = operation === 'plus' ? state.total_price + price : state.total_price - price;\n  let cart = [...state.cart.slice(0, ind), updatedItem, ...state.cart.slice(ind + 1)];\n  return _objectSpread(_objectSpread({}, state), {}, {\n    total_price,\n    cart\n  });\n};\n\nconst deleteCartItem = (id, state) => {\n  let [ind, cartItem] = findCartItem(id, state);\n  let total_price = state.total_price - cartItem.count * cartItem.price;\n  let count_cart = state.count_cart - cartItem.count;\n  let cart = [...state.cart.slice(0, ind), ...state.cart.slice(ind + 1)];\n  return _objectSpread(_objectSpread({}, state), {}, {\n    total_price,\n    count_cart,\n    cart\n  });\n};\n\nconst addProduct = (product, state) => {\n  let {\n    price,\n    count,\n    id,\n    name\n  } = product;\n  let count_cart = state.count_cart + count;\n  let total_price = state.total_price + price * count;\n  let [ind, cartItem] = findCartItem(id, state);\n  let newItem, cart;\n\n  if (ind > -1) {\n    newItem = _objectSpread(_objectSpread({}, cartItem), {}, {\n      count: count + cartItem.count\n    });\n    cart = [...state.cart.slice(0, ind), newItem, ...state.cart.slice(ind + 1)];\n  } else {\n    newItem = _objectSpread({}, product);\n    cart = [...state.cart, newItem];\n  }\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    count_cart,\n    total_price,\n    cart\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'add_product':\n      {\n        let {\n          product\n        } = action;\n        return addProduct(product, state);\n      }\n\n    case 'minus_cart':\n      {\n        let {\n          id\n        } = action;\n        return updateCount(id, state, 'minus');\n      }\n\n    case 'plus_cart':\n      {\n        let {\n          id\n        } = action;\n        return updateCount(id, state, 'plus');\n      }\n\n    case 'delete_cart':\n      {\n        return deleteCartItem(action.id, state);\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport { reducer };","map":{"version":3,"sources":["D:/Programming languages/React/re-store/redux/reducers/index.js"],"names":["initialState","count_cart","total_price","cart","findCartItem","id","state","ind","findIndex","item","cartItem","updateCount","operation","count","price","updatedItem","slice","deleteCartItem","addProduct","product","name","newItem","reducer","action","type"],"mappings":"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","sourcesContent":["const initialState = {\r\n  count_cart: 0,\r\n  total_price: 0,\r\n  cart: [],\r\n};\r\n\r\n/**\r\n * Find cart item by id\r\n *\r\n * @param {Number} index\r\n * @param {Object} State\r\n */\r\nconst findCartItem = (id, state) => {\r\n  let ind = state.cart.findIndex((item) => id === item.id);\r\n  let cartItem = state.cart[ind];\r\n  return [ind, cartItem];\r\n};\r\n\r\nconst updateCount = (id, state, operation) => {\r\n  let [ind, cartItem] = findCartItem(id, state);\r\n\r\n  let { count, price } = cartItem;\r\n\r\n  let updatedItem = {\r\n    ...cartItem,\r\n    count: operation === 'plus' ? ++count : --count,\r\n  };\r\n\r\n  let total_price =\r\n    operation === 'plus'\r\n      ? state.total_price + price\r\n      : state.total_price - price;\r\n\r\n  let cart = [\r\n    ...state.cart.slice(0, ind),\r\n    updatedItem,\r\n    ...state.cart.slice(ind + 1),\r\n  ];\r\n\r\n  return {\r\n    ...state,\r\n    total_price,\r\n    cart,\r\n  };\r\n};\r\n\r\nconst deleteCartItem = (id, state) => {\r\n  let [ind, cartItem] = findCartItem(id, state);\r\n\r\n  let total_price = state.total_price - cartItem.count * cartItem.price;\r\n  let count_cart = state.count_cart - cartItem.count;\r\n  let cart = [...state.cart.slice(0, ind), ...state.cart.slice(ind + 1)];\r\n\r\n  return {\r\n    ...state,\r\n    total_price,\r\n    count_cart,\r\n    cart,\r\n  };\r\n};\r\n\r\nconst addProduct = (product, state) => {\r\n  let { price, count, id, name } = product;\r\n\r\n  let count_cart = state.count_cart + count;\r\n  let total_price = state.total_price + price * count;\r\n\r\n  let [ind, cartItem] = findCartItem(id, state);\r\n\r\n  let newItem, cart;\r\n\r\n  if (ind > -1) {\r\n    newItem = {\r\n      ...cartItem,\r\n      count: count + cartItem.count,\r\n    };\r\n    cart = [...state.cart.slice(0, ind), newItem, ...state.cart.slice(ind + 1)];\r\n  } else {\r\n    newItem = {\r\n      ...product,\r\n    };\r\n    cart = [...state.cart, newItem];\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    count_cart,\r\n    total_price,\r\n    cart,\r\n  };\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'add_product': {\r\n      let { product } = action;\r\n      return addProduct(product, state);\r\n    }\r\n\r\n    case 'minus_cart': {\r\n      let { id } = action;\r\n      return updateCount(id, state, 'minus');\r\n    }\r\n\r\n    case 'plus_cart': {\r\n      let { id } = action;\r\n      return updateCount(id, state, 'plus');\r\n    }\r\n\r\n    case 'delete_cart': {\r\n      return deleteCartItem(action.id, state);\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { reducer };\r\n"]},"metadata":{},"sourceType":"module"}